import questionary
from moodle_db import get_questions_without_answers, update_grader_info
from main import check_answers_once
import time
import threading
import sys
import io
from contextlib import redirect_stdout

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–æ–π
check_thread = None
stop_event = threading.Event()
current_interval = 30
is_checking = False

def change_interval(current_interval):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    new_interval = questionary.text(
        f"–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {current_interval} —Å–µ–∫. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (—Å–µ–∫—É–Ω–¥—ã):",
        validate=lambda x: x.isdigit() and int(x) > 0
    ).ask()
    return int(new_interval)

def check_and_add_grader_answers():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    questions = get_questions_without_answers()
    if not questions:
        print("üéâ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –∏–º–µ—é—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã!")
        return

    print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.")
    
    for q in questions:
        print(f"\n–í–æ–ø—Ä–æ—Å ID {q['id']}: {q['name']}")
        print(f"–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞: {q['questiontext']}")
        
        if questionary.confirm("–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞?").ask():
            grader_info = questionary.text("–í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:").ask()
            if grader_info.strip():
                success = update_grader_info(q['id'], grader_info)
                print("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!" if success else "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            else:
                print("‚ùå –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")

def run_auto_check(interval):
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"""
    global is_checking
    
    try:
        is_checking = True
        while not stop_event.is_set():
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏
            with io.StringIO() as buf, redirect_stdout(buf):
                check_answers_once()
            
            # –û–∂–∏–¥–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–ª–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
            for _ in range(interval):
                if stop_event.is_set():
                    break
                time.sleep(1)
                
    except Exception as e:
        pass  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    finally:
        is_checking = False

def start_background_check():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    global check_thread, stop_event, is_checking
    stop_event.clear()
    check_thread = threading.Thread(
        target=run_auto_check, 
        args=(current_interval,),
        daemon=True
    )
    check_thread.start()
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {current_interval} —Å–µ–∫")

def stop_background_check():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    global stop_event, is_checking
    stop_event.set()
    is_checking = False
    print("üõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

def clear_screen():
    """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –∫–æ–Ω—Å–æ–ª–∏"""
    print("\033[H\033[J", end="")

def main_menu():
    global current_interval, is_checking
    
    while True:
        clear_screen()
        print("=== Moodle Evaluator CLI ===")
        print(f"–°—Ç–∞—Ç—É—Å: {'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞' if is_checking else 'üõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞'}")
        print(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {current_interval} —Å–µ–∫\n")
        
        choices = [
            {"name": "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É" if is_checking else "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", "value": "toggle"},
            {"name": "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏", "value": "interval"},
            {"name": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤", "value": "check_answers"},
            {"name": "–í—ã—Ö–æ–¥", "value": "exit"}
        ]

        choice = questionary.select(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            choices=choices
        ).ask()

        if choice == "toggle":
            if is_checking:
                stop_background_check()
            else:
                start_background_check()
            time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è

        elif choice == "interval":
            current_interval = change_interval(current_interval)

        elif choice == "check_answers":
            check_and_add_grader_answers()
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

        elif choice == "exit":
            if is_checking:
                stop_background_check()
            break

if __name__ == "__main__":
    try:
        main_menu()
    except KeyboardInterrupt:
        print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        if is_checking:
            stop_background_check()
        sys.exit(0)